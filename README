This is just a simple Web application to demonstrate a solution to a problem I posed on RAILSforum, http://railsforum.com/viewtopic.php?pid=143106. The problem for a _real_ project I am currently working on essentially corresponds with this one: I have a form in which I need a user to fill various attibutes of a Person model, say name, height, weight. But I also need the user to select which of a fixed set of colors, say all of the ones in the rainbow, is their FavoriteColors and for each specify a rank: I like orange first, green second, and violet third.

This is unlike the notion of creating/updating/deleting a set of TelephoneNumbers in that there is no fixed set of them from which to choose, and even if there were, it would not make sense to display all of the possible ones and have the user select which ones applied to them.

In the latter case, I am able to take advantage of the magical accepts_nested_attibutes_for method in the Person model and the fields_for method in the .erb form because the set of TelephoneNumbers displayed in the form is dynamic. I can also keep the controller dumb and simply let @person.update_attributes do its thing. But I cannot do the same with FavoriteColors here because the entire set of colors should _always_ displayed, only some of which are germane to the Person in question.

The solution was basically to:

* Conditionally display populated nested form elements or unpopulated ones depending on whether or not FavoriteColor records existed.
* Introduce :before_save in Person and a associate a method to it to mark any inbound FavoriteColor records as deleted if the preference number is null.

It's not perfect, as I have two things that feel a bit dirty:

* I have to manually create the nested form element names since I could not figure out how to take advantage of fields_for in this case.
* There are no checkboxes; it seems better to have a user assert that a record "counts" through a checkbox versus whether or not an attribute is null. This would not scale if I had to introduce a second attribute.

To get everything running, do the following from within the top level project directory:

* bundle install
* rake db:schema:load
* rake db:seed
* rails server

